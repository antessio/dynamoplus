service: dynamoplus

plugins:
  - serverless-python-requirements
  - serverless-dynamodb-local
  - serverless-offline

custom:
  pythonRequirements:
    dockerizePip: false
  serverless-offline:
    host: 0.0.0.0
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - local
    start:
      port: 8000
      migrate: true
  system_collections: "collection,index,client_authorization"
  allowed_origins: ${file(./secrets.json):ALLOWED_ORIGINS}
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  region: eu-west-1
  memorySize: 256

  environment:
    ALLOWED_ORIGINS: ${self:custom.allowed_origins}
    DYNAMODB_DOMAIN_TABLE: ${self:service}-${opt:stage, self:provider.stage}-domain
    DYNAMODB_SYSTEM_TABLE: ${self:service}-${opt:stage, self:provider.stage}-system
    STAGE: ${opt:stage, self:provider.stage}
    REGION: ${self:provider.region}
    ENTITIES: ${self:custom.system_collections}
    ROOT_ACCOUNT: ${file(./secrets.json):ROOT_ACCOUNT}
    ROOT_PASSWORD: ${file(./secrets.json):ROOT_PASSWORD}
    DYNAMODB_HOST: http://localhost
    DYNAMODB_PORT: 8000

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:CreateTable
        # New permissions needed for stream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeTable
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: [!GetAtt SystemDynamoDbTable.Arn, !Join [ '/',[!GetAtt SystemDynamoDbTable.Arn,index/*]], !GetAtt DomainDynamoDbTable.Arn, !Join [ '/',[!GetAtt DomainDynamoDbTable.Arn,index/*]]]


functions:
  auth:
    handler: aws/http/authorizer.authorize
    cors: true
  handleStream:
    handler: aws/events/dynamodb.dynamo_stream_handler
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [ DomainDynamoDbTable, StreamArn ] }
          batchSize: 1
  adminSetup:
    handler: aws/http/admin.setup
    events:
      - http:
          path: admin/setup
          method: post
          cors: true
          authorizer:
            name: auth
            type: request
  adminCleanup:
    handler: aws/http/admin.cleanup
    events:
      - http:
          path: admin/cleanup
          method: post
          cors: true
          authorizer:
            name: auth
            type: request

  info:
    handler: aws/http/info.info
    events:
      - http:
          path: system/info
          method: get
          cors: true
  documentation:
    handler: aws/http/doc.swagger_json
    events:
      - http:
          path: system/documentation/swagger.json
          method: get
          cors: true

  create:
    handler: aws/http/http.create
    events:
      - http:
          path: dynamoplus/{collection}
          method: post
          cors: true
          authorizer:
            name: auth
            type: request

  query:
    handler: aws/http/http.query
    events:
      - http:
          path: dynamoplus/{collection}/query
          method: post
          cors: true
          authorizer:
            name: auth
            type: request

  getAll:
    handler: aws/http/http.get
    events:
      - http:
          path: dynamoplus/{collection}
          method: get
          cors: true
          authorizer:
            name: auth
            type: request
  get:
    handler: aws/http/http.get
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: get
          cors: true
          authorizer:
            name: auth
            type: request

  update:
    handler: aws/http/http.update
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: put
          cors: true
          authorizer:
            name: auth
            type: request

  delete:
    handler: aws/http/http.delete
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: delete
          cors: true
          authorizer:
            name: auth
            type: request

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    SystemDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: data
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_SYSTEM_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: sk-data-index
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: data
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '1'
              WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    DomainDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: data
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_DOMAIN_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: sk-data-index
            KeySchema:
              - AttributeName: sk
                KeyType: HASH
              - AttributeName: data
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '1'
              WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES 
      
