service: dynamoplus

plugins:
  - serverless-python-requirements
custom:
  pythonRequirements:
    dockerizePip: true
  serverless-offline:
    host: 0.0.0.0
  dynamodb:
    start:
      migrate: true
  system_indexes: "collection#name,index#name,index#collection.name,collection#active"
  system_collections: "collection#id#creation_date_time,index#id#creation_date_time"
  allowed_origins: "http://localhost:3000,https://dynamoplus-dashboard.firebaseapp.com" ## to change in production
frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: python3.7
  region: eu-west-1
  memorySize: 256

  environment:
    ALLOWED_ORIGINS: ${self:custom.allowed_origins}
    DYNAMODB_DOMAIN_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-domain
    DYNAMODB_SYSTEM_TABLE_NAME: ${self:service}-${opt:stage, self:provider.stage}-system
    REGION: {self.provider.region}
    INDEXES: ${self:custom.system_indexes}
    ENTITIES: ${self:custom.system_collections}
    AUTH0_CLIENT_ID: ${file(./secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./public_key)}
    AUDIENCE: ${file(./secrets.json):AUDIENCE}
    
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        # New permissions needed for stream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:DescribeStream
        - dynamodb:ListStreams
      Resource: [!GetAtt SystemDynamoDbTable.Arn, !Join [ '/',[!GetAtt SystemDynamoDbTable.Arn,index/*]], !GetAtt DomainDynamoDbTable.Arn, !Join [ '/',[!GetAtt DomainDynamoDbTable.Arn,index/*]]]


functions:
  auth:
    handler: dynamoplus/http/authorizer.authorize
    cors: true
  handleStream:
    handler: dynamoplus/events/dynamodb.dynamoStreamHandler
    events:
      - stream:
          type: dynamodb
          arn: { Fn::GetAtt: [ DomainDynamoDbTable, StreamArn ] }
          batchSize: 1
  create:
    handler: dynamoplus/http/create.create
    events:
      - http:
          path: dynamoplus/{collection}
          method: post
          cors: true
          authorizer: 
            name: auth
            type: request

  query:
    handler: dynamoplus/http/query.query
    events:
      - http:
          path: dynamoplus/{collection}/query/{queryId}
          method: post
          cors: true
          authorizer: 
            name: auth
            type: request
  queryAll:
    handler: dynamoplus/http/query.query
    events:
      - http:
          path: dynamoplus/{collection}/query
          method: post
          cors: true
          authorizer: 
            name: auth
            type: request

  get:
    handler: dynamoplus/http/get.get
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: get
          cors: true
          authorizer: 
            name: auth
            type: request

  update:
    handler: dynamoplus/http/update.update
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: put
          cors: true
          authorizer: 
            name: auth
            type: request

  delete:
    handler: dynamoplus/http/delete.delete
    events:
      - http:
          path: dynamoplus/{collection}/{id}
          method: delete
          cors: true
          authorizer: 
            name: auth
            type: request

resources:
  Resources:
    # This response is needed for custom authorizer failures cors support ¯\_(ツ)_/¯
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    AuthFailureGatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: UNAUTHORIZED
        RestApiId:
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
    SystemDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: data
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_SYSTEM_TABLE_NAME}
        GlobalSecondaryIndexes:
        - IndexName: sk-data-index
          KeySchema:
          - AttributeName: sk
            KeyType: HASH
          - AttributeName: data
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    DomainDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: data
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_DOMAIN_TABLE_NAME}
        GlobalSecondaryIndexes:
        - IndexName: sk-data-index
          KeySchema:
          - AttributeName: sk
            KeyType: HASH
          - AttributeName: data
            KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: '1'
            WriteCapacityUnits: '1'
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES 
      
